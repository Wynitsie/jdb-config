#!/usr/bin/env python
import os, os.path, re, sys, json, argparse

cxx_flags_re = re.compile('CXX_FLAGS = (.+)')

def uniqify_list(input_list):
    '''
    Remove duplicates in a list, preserving the order
    of the remaining elements.
    '''
    output_list = []
    for e in input_list:
        if e not in output_list:
            output_list.append(e)
    return output_list

def compile_flags_from_flags_file(flags_filename):
    '''
    Look through a flags.make file that cmake created and add make a list of compile flags.
    '''
    f = open(flags_filename)
    s = f.read()
    f.close()
    m = cxx_flags_re.search(s)
    flags = []
    if m is not None:
        cxx_flags_str = m.groups()[0]
        for cxx_flag in cxx_flags_str.split():
            flags.append(cxx_flag)
    return flags

def compile_flags_from_catkin_workspace(catkin_workspace_dir):
    '''
    Make a list of all compile flags for a catkin workspace.
    '''
    catkin_workspace_path = os.path.realpath(catkin_workspace_dir)
    build_dir = os.path.join(catkin_workspace_path, 'build')

    # Add all the include directories we can find so that SublimeClang can compile code
    flags = []
    for root, dirs, files in os.walk(build_dir):
        if 'flags.make' in files:
            flags.extend(compile_flags_from_flags_file(os.path.join(root, 'flags.make')))
    return flags

def is_include_dir_flag(flag):
   return flag[:2] == '-I'


# Parse commandline arguments
parser = argparse.ArgumentParser(description='Create a YCM config for a catkin workspace')
parser.add_argument('catkin_workspace', help='catkin workspace directory')
args = parser.parse_args()

all_flags = compile_flags_from_catkin_workspace(args.catkin_workspace)
flags = ['--std=c++11'] + [f for f in all_flags if is_include_dir_flag(f)]
flags = uniqify_list(flags)

# Create YCM config file
output_file = open(os.path.join(args.catkin_workspace, '.ycm_extra_conf.py'), 'w+')
output_file.write(
'''
flags = %s

def FlagsForFile(filename, **kwargs):
    global flags
    return {
          'flags': flags,
          'do_cache': True
        }
''' % (str(flags),))
output_file.close()
