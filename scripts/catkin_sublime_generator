#!/usr/bin/env python
import os, os.path, re, sys, json, argparse

cxx_flags_re = re.compile('CXX_FLAGS = (.+)')

def process_flags_file(filename):
    global include_dirs
    print 'Processing', filename
    f = open(filename)
    s = f.read()
    f.close()
    m = cxx_flags_re.search(s)
    if m is not None:
        cxx_flags_str = m.groups()[0]
        for cxx_flag in cxx_flags_str.split():
            if cxx_flag[:2] == '-I':
                if cxx_flag not in cxx_flags:
                    cxx_flags.append(cxx_flag)

parser = argparse.ArgumentParser(description='Create a Sublime Text workspace from catkin workspace(s)')
parser.add_argument('catkin_workspaces', metavar='catkin_workspaces', type=str, nargs='+',
                     help='catkin workspaces')
parser.add_argument('-p', dest='project_name', default='foo', help='sublime text project name')
args = parser.parse_args()


cxx_flags = [
    '-stdlib=libc++',
]
folders = []

for catkin_workspace_dir in args.catkin_workspaces:
    catkin_workspace_path = os.path.realpath(catkin_workspace_dir)
    src_dir = os.path.join(catkin_workspace_path, 'src')
    build_dir = os.path.join(catkin_workspace_path, 'build')

    folders.append({
        'follow_symlinks' : True,
        'path' : src_dir,
        'name' : catkin_workspace_dir
    })
    for root, dirs, files in os.walk(build_dir):
        if 'flags.make' in files:
            process_flags_file(os.path.join(root, 'flags.make'))

output_file = open(args.project_name + '.sublime-project', 'w+')
json.dump(
    {
        'folders' : folders,
        'settings' : {
            'sublimeclang_options' : cxx_flags
        }
    }, output_file, indent=4)
output_file.close()
