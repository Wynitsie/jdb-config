#!/usr/bin/env python
import sys, subprocess, argparse, os, os.path

class WS:
    '''
    Synchronizes a workspace among multiple hosts.

    All paths should be absolute real paths unless prefixed with rel_ (relative).
    '''
    def __init__(self):
        # assumes this command is being run in the workspace directory
        # also assumes the workspace directory is somewhere in the user's home directory
        self.home_dir = os.path.realpath(os.path.expanduser('~'))

        # os.path.realpath disambiguates directories which have multiple names due to symlinks
        self.local_workspace_dir = os.path.realpath(os.getcwd())
        self.rel_local_workspace_dir = os.path.relpath(self.local_workspace_dir, self.home_dir)
        self.rel_local_src_dir = os.path.join(self.rel_local_workspace_dir, 'src')

    def call(self, cmd):
        subprocess.call(cmd)
    
    def push(self, remote):
        # assume workspace should in the same directory (relative to home) on the remote system
        remote_workspace_dir = self.rel_local_workspace_dir
        remote_workspace_uri = '%s:%s' % (args.remote_host, remote_workspace_dir)
        
        print '%s --> %s' % (self.local_workspace_dir, remote_workspace_uri)

        # push source directories
        for subdir in ['src']: #, 'rosbuild_src']: # (should push rosbuild_src, but shouldn't push build files)
            local_dir = os.path.join(self.local_workspace_dir, subdir)

            print 'Synchronizing %s --> %s' % (local_dir, remote_workspace_uri)

            # ignore git config files
            sync_cmd = ['rsync', '-ravz', '--delete', '--filter=- .git', local_dir, remote_workspace_uri]
            self.call(sync_cmd)


# parse command line args
parser = argparse.ArgumentParser()
parser.add_argument('command', help='push or pull')
parser.add_argument('remote_host')
args = parser.parse_args()

ws = WS()

if args.command == 'push':
    ws.push(args.remote_host)
else:
    print 'Unrecognized command %s' % args.remote_host
